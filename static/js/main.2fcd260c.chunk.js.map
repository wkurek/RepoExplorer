{"version":3,"sources":["features/explorer/components/Repo/Repo.module.css","shared/LoadingMask/LoadingMask.module.css","shared/Pagination/Pagination.module.css","features/explorer/components/ReposDetails/ReposDetails.module.css","features/explorer/components/UserRepos/UserRepos.module.css","features/explorer/services/store/actions.ts","features/explorer/services/store/helpers.ts","features/explorer/services/store/reducer.ts","store/reducer.ts","store/index.ts","features/explorer/services/store/selectors.ts","utils/axios.ts","utils/helpers.ts","features/explorer/services/api/index.ts","features/explorer/services/store/operations.ts","features/explorer/components/SearchForm/SearchForm.tsx","features/explorer/components/SearchQueryInfo/SearchQueryInfo.tsx","features/explorer/components/Repo/Repo.tsx","shared/LoadingMask/LoadingMask.tsx","shared/Pagination/Pagination.tsx","features/explorer/components/ReposDetails/ReposDetails.tsx","features/explorer/components/UserRepos/UserRepos.tsx","features/explorer/components/Users/Users.tsx","features/explorer/components/Results/Results.tsx","features/explorer/containers/Explorer/Explorer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","searchUsersStart","createAction","searchUsersSuccess","searchUsersFailure","updateUsersPage","fetchUserReposStart","fetchUserReposSuccess","fetchUserReposFailure","updateUserReposPage","normalizeUsers","users","reduce","obj","userModel","user","id","login","repos","fetching","error","pagination","initialPagination","byId","allIds","push","page","pageCount","initialState","searchQuery","reducer","createReducer","type","state","payload","normalizedRepos","repoModel","name","description","stargazersCount","stargazers_count","userId","reduceRight","arr","item","includes","rootReducer","combineReducers","explorer","explorerReducer","store","configureStore","selectExplorerState","selectUsersMap","createSelector","selectUsersPagination","selectSearchQuery","selectUsersResults","map","userRepos","repoId","gitHubInstance","axios","create","baseURL","headers","Accept","getPageCount","linkHeader","pageLinks","links","parseLink","Object","keys","length","first","prev","Number","last","searchUsers","a","get","data","link","items","fetchUserRepos","dispatch","getState","actions","api","result","searchUser","resetPagination","exportFunctions","query","SearchForm","search","useState","setQuery","spinner","Spinner","animation","size","as","className","Form","onSubmit","event","preventDefault","Group","controlId","Control","placeholder","value","onChange","target","Button","disabled","block","icon","faSearch","SearchQueryInfo","Repo","repo","classes","wrapper","Row","Col","sm","faStar","LoadingMask","data-testid","variant","Pagination","onPageChange","prevDisabled","nextDisabled","First","onClick","Prev","Item","active","Next","Last","ReposDetails","key","loadingMask","errorAlert","Alert","noResultAlert","UserRepos","expanded","setExpanded","reposDetails","faChevronUp","faChevronDown","Users","usersRepos","Results","searchQueryInfo","searchAlert","usersRows","style","position","Explorer","useDispatch","useSelector","operations","App","Container","Boolean","window","location","hostname","match","app","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2fcd260c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Repo_wrapper__2g6Mm\",\"main-row\":\"Repo_main-row__183Mj\",\"description-row\":\"Repo_description-row__25Gta\",\"stargazers-col\":\"Repo_stargazers-col__385Oa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"LoadingMask_wrapper__28QnR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__E-kVi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ReposDetails_wrapper__3XgDL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"UserRepos_user__2pWs7\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nimport {\r\n  IUpdateUserReposPageActionPayload,\r\n  IFetchUserReposSuccessActionPayload,\r\n  ISearchUsersSuccessActionPayload,\r\n} from \"./types\";\r\n\r\nexport const searchUsersStart = createAction(\"SEARCH_USERS_START\");\r\nexport const searchUsersSuccess = createAction<\r\n  ISearchUsersSuccessActionPayload\r\n>(\"SEARCH_USERS_SUCCESS\");\r\nexport const searchUsersFailure = createAction(\"SEARCH_USERS_FAILURE\");\r\n\r\nexport const updateUsersPage = createAction<number>(\"UPDATE_USERS_PAGE\");\r\n\r\nexport const fetchUserReposStart = createAction<number>(\r\n  \"FETCH_USER_REPOS_START\"\r\n);\r\nexport const fetchUserReposSuccess = createAction<\r\n  IFetchUserReposSuccessActionPayload\r\n>(\"FETCH_USER_REPOS_SUCCESS\");\r\nexport const fetchUserReposFailure = createAction<number>(\r\n  \"FETCH_USER_REPOS_FAILURE\"\r\n);\r\n\r\nexport const updateUserReposPage = createAction<\r\n  IUpdateUserReposPageActionPayload\r\n>(\"UPDATE_USER_REPOS_PAGE\");\r\n","import { IUserModel, IUser, IRepoModel, IRepo } from \"./types\";\r\nimport { initialPagination } from \"./reducer\";\r\n\r\nexport const generateUser = ({ id, login }: IUserModel): IUser => ({\r\n  id,\r\n  login,\r\n  repos: [],\r\n  fetching: false,\r\n  error: false,\r\n  pagination: initialPagination,\r\n});\r\n\r\nexport const normalizeUsers = (\r\n  users: IUserModel[]\r\n): {\r\n  byId: Record<number, IUser>;\r\n  allIds: number[];\r\n} =>\r\n  users.reduce<{\r\n    byId: Record<number, IUser>;\r\n    allIds: number[];\r\n  }>(\r\n    (obj, userModel) => {\r\n      const user = generateUser(userModel);\r\n\r\n      obj.byId[userModel.id] = user;\r\n      obj.allIds.push(userModel.id);\r\n\r\n      return obj;\r\n    },\r\n    { byId: {}, allIds: [] }\r\n  );\r\n\r\nexport const generateRepo = ({\r\n  id,\r\n  name,\r\n  description,\r\n  stargazers_count,\r\n}: IRepoModel): IRepo => ({\r\n  id,\r\n  name,\r\n  description,\r\n  stargazersCount: stargazers_count,\r\n});\r\n\r\nexport const normalizeRepos = (\r\n  repos: IRepoModel[]\r\n): {\r\n  byId: Record<number, IRepo>;\r\n  allIds: number[];\r\n} =>\r\n  repos.reduce<{\r\n    byId: Record<number, IRepo>;\r\n    allIds: number[];\r\n  }>(\r\n    (obj, repoModel) => {\r\n      const user = generateRepo(repoModel);\r\n\r\n      obj.byId[repoModel.id] = user;\r\n      obj.allIds.push(repoModel.id);\r\n\r\n      return obj;\r\n    },\r\n    { byId: {}, allIds: [] }\r\n  );\r\n\r\nexport const filterOutDuplicates = (items: number[]): number[] =>\r\n  items.reduceRight<number[]>((arr, item) => {\r\n    if (!arr.includes(item)) {\r\n      arr.push(item);\r\n    }\r\n\r\n    return arr;\r\n  }, []);\r\n","import { createReducer, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport {\r\n  IExplorerState,\r\n  IFetchUserReposSuccessActionPayload,\r\n  IUpdateUserReposPageActionPayload,\r\n  ISearchUsersSuccessActionPayload,\r\n} from \"./types\";\r\nimport { IPagination } from \"../../../../utils/types\";\r\nimport {\r\n  searchUsersStart,\r\n  searchUsersSuccess,\r\n  searchUsersFailure,\r\n  updateUsersPage,\r\n  fetchUserReposStart,\r\n  fetchUserReposSuccess,\r\n  fetchUserReposFailure,\r\n  updateUserReposPage,\r\n} from \"./actions\";\r\nimport { normalizeUsers, normalizeRepos, filterOutDuplicates } from \"./helpers\";\r\n\r\nconst handleSearchUsersStart = (state: IExplorerState) => {\r\n  state.error = false;\r\n  state.fetching = true;\r\n};\r\n\r\nconst handleSearchUsersSuccess = (\r\n  state: IExplorerState,\r\n  { payload }: PayloadAction<ISearchUsersSuccessActionPayload>\r\n) => {\r\n  state.fetching = false;\r\n  state.pagination.pageCount = payload.pageCount;\r\n  state.users = normalizeUsers(payload.users);\r\n  state.searchQuery = payload.searchQuery;\r\n};\r\n\r\nconst handleSearchUsersFailure = (state: IExplorerState) => {\r\n  state.error = true;\r\n  state.fetching = false;\r\n};\r\n\r\nconst handleUpdateUsersPage = (\r\n  state: IExplorerState,\r\n  { payload }: PayloadAction<number>\r\n) => {\r\n  state.pagination.page = payload;\r\n};\r\n\r\nconst handleFetchUserReposStart = (\r\n  state: IExplorerState,\r\n  { payload }: PayloadAction<number>\r\n) => {\r\n  state.users.byId[payload].error = false;\r\n  state.users.byId[payload].fetching = true;\r\n};\r\n\r\nconst handleFetchUserReposSuccess = (\r\n  state: IExplorerState,\r\n  { payload }: PayloadAction<IFetchUserReposSuccessActionPayload>\r\n) => {\r\n  const normalizedRepos = normalizeRepos(payload.repos);\r\n\r\n  state.users.byId[payload.userId].fetching = false;\r\n  state.users.byId[payload.userId].pagination.pageCount = payload.pageCount;\r\n  state.users.byId[payload.userId].repos = normalizedRepos.allIds;\r\n\r\n  state.repos.byId = { ...state.repos.byId, ...normalizedRepos.byId };\r\n  state.repos.allIds = filterOutDuplicates([\r\n    ...state.repos.allIds,\r\n    ...normalizedRepos.allIds,\r\n  ]);\r\n};\r\n\r\nconst handleFetchUserReposFailure = (\r\n  state: IExplorerState,\r\n  { payload }: PayloadAction<number>\r\n) => {\r\n  state.users.byId[payload].error = true;\r\n  state.users.byId[payload].fetching = false;\r\n};\r\n\r\nconst handleUpdateUserReposPage = (\r\n  state: IExplorerState,\r\n  { payload }: PayloadAction<IUpdateUserReposPageActionPayload>\r\n) => {\r\n  state.users.byId[payload.userId].pagination.page = payload.page;\r\n};\r\n\r\nexport const initialPagination: IPagination = {\r\n  page: 1,\r\n  pageCount: 1,\r\n};\r\n\r\nexport const initialState: IExplorerState = {\r\n  fetching: false,\r\n  error: false,\r\n  pagination: initialPagination,\r\n  users: {\r\n    byId: {},\r\n    allIds: [],\r\n  },\r\n  repos: {\r\n    byId: {},\r\n    allIds: [],\r\n  },\r\n  searchQuery: null,\r\n};\r\n\r\nconst reducer = createReducer(initialState, {\r\n  [searchUsersStart.type]: handleSearchUsersStart,\r\n  [searchUsersSuccess.type]: handleSearchUsersSuccess,\r\n  [searchUsersFailure.type]: handleSearchUsersFailure,\r\n  [updateUsersPage.type]: handleUpdateUsersPage,\r\n  [fetchUserReposStart.type]: handleFetchUserReposStart,\r\n  [fetchUserReposSuccess.type]: handleFetchUserReposSuccess,\r\n  [fetchUserReposFailure.type]: handleFetchUserReposFailure,\r\n  [updateUserReposPage.type]: handleUpdateUserReposPage,\r\n});\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"@reduxjs/toolkit\";\r\n\r\nimport explorerReducer from \"../features/explorer/services/store/reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  explorer: explorerReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport rootReducer from \"./reducer\";\r\n\r\nconst store = configureStore({ reducer: rootReducer });\r\n\r\nexport default store;\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nimport { RootState } from \"../../../../store/types\";\r\nimport { IUserResult } from \"./types\";\r\n\r\nexport const selectExplorerState = (state: RootState) => state.explorer;\r\n\r\nexport const selectUsersMap = createSelector(\r\n  selectExplorerState,\r\n  (state) => state.users.byId\r\n);\r\n\r\nexport const selectUsersPagination = createSelector(\r\n  selectExplorerState,\r\n  (state) => state.pagination\r\n);\r\n\r\nexport const selectSearchQuery = createSelector(\r\n  selectExplorerState,\r\n  (state) => state.searchQuery\r\n);\r\n\r\nexport const selectUsersResults = createSelector(selectExplorerState, (state) =>\r\n  state.users.allIds.map<IUserResult>((userId) => {\r\n    const user = state.users.byId[userId];\r\n    const userRepos = user.repos.map((repoId) => state.repos.byId[repoId]);\r\n\r\n    return { ...user, repos: userRepos };\r\n  })\r\n);\r\n","import axios from \"axios\";\r\n\r\nexport const gitHubInstance = axios.create({\r\n  baseURL: \"https://api.github.com\",\r\n  headers: { Accept: \"application/vnd.github.v3+json\" },\r\n});\r\n","import parseLink, { Links } from \"parse-link-header\";\r\n\r\nconst isLastPage = (pageLinks: Links) => {\r\n  return (\r\n    Object.keys(pageLinks).length === 2 && pageLinks.first && pageLinks.prev\r\n  );\r\n};\r\n\r\nexport const getPageCount = (linkHeader: any): number => {\r\n  if (!linkHeader) {\r\n    return 1;\r\n  }\r\n\r\n  const links = parseLink(linkHeader);\r\n\r\n  if (links === null) {\r\n    return 1;\r\n  }\r\n\r\n  if (isLastPage(links)) {\r\n    return Number(links.prev.page) + 1;\r\n  }\r\n\r\n  if (links.last) {\r\n    return Number(links.last.page);\r\n  }\r\n\r\n  return 1;\r\n};\r\n","import { gitHubInstance } from \"../../../../utils/axios\";\r\nimport {\r\n  ISearchUsersResult,\r\n  ISearchUsersRequest,\r\n  ISearchUsersResponse,\r\n  IFetchUserReposResult,\r\n  IFetchUserReposResponse,\r\n  IFetchUserReposRequest,\r\n} from \"./types\";\r\nimport { getPageCount } from \"../../../../utils/helpers\";\r\n\r\nexport const searchUsers = async ({\r\n  searchQuery,\r\n  page,\r\n}: ISearchUsersRequest): Promise<ISearchUsersResult> => {\r\n  const { data, headers } = await gitHubInstance.get<ISearchUsersResponse>(\r\n    `/search/users?q=${searchQuery}&page=${page}&per_page=5`\r\n  );\r\n\r\n  const pageCount = getPageCount(headers.link);\r\n\r\n  return { users: data.items, pageCount };\r\n};\r\n\r\nexport const fetchUserRepos = async ({\r\n  login,\r\n  page,\r\n}: IFetchUserReposRequest): Promise<IFetchUserReposResult> => {\r\n  const { data, headers } = await gitHubInstance.get<IFetchUserReposResponse>(\r\n    `/users/${login}/repos?page=${page}&per_page=5`\r\n  );\r\n\r\n  const pageCount = getPageCount(headers.link);\r\n\r\n  return { repos: data, pageCount };\r\n};\r\n","import { AppThunk } from \"../../../../store/types\";\r\n\r\nimport * as api from \"../api\";\r\nimport * as actions from \"./actions\";\r\nimport {\r\n  selectUsersMap,\r\n  selectUsersPagination,\r\n  selectSearchQuery,\r\n} from \"./selectors\";\r\n\r\nconst fetchUserRepos = (userId: number): AppThunk => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  dispatch(actions.fetchUserReposStart(userId));\r\n\r\n  try {\r\n    const users = selectUsersMap(getState());\r\n    const {\r\n      login,\r\n      pagination: { page },\r\n    } = users[userId];\r\n\r\n    const result = await api.fetchUserRepos({ login, page });\r\n    dispatch(actions.fetchUserReposSuccess({ ...result, userId }));\r\n  } catch {\r\n    dispatch(actions.fetchUserReposFailure(userId));\r\n  }\r\n};\r\n\r\nconst searchUser = (\r\n  searchQuery: string,\r\n  resetPagination = true\r\n): AppThunk => async (dispatch, getState) => {\r\n  dispatch(actions.searchUsersStart());\r\n\r\n  if (resetPagination) {\r\n    dispatch(actions.updateUsersPage(1));\r\n  }\r\n\r\n  try {\r\n    const { page } = selectUsersPagination(getState());\r\n\r\n    const result = await api.searchUsers({ searchQuery, page });\r\n    dispatch(actions.searchUsersSuccess({ ...result, searchQuery }));\r\n\r\n    for (const user of result.users) {\r\n      await dispatch(exportFunctions.fetchUserRepos(user.id));\r\n    }\r\n  } catch {\r\n    dispatch(actions.searchUsersFailure());\r\n  }\r\n};\r\n\r\nconst updateUsersPage = (page: number): AppThunk => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  dispatch(actions.updateUsersPage(page));\r\n  const query = selectSearchQuery(getState());\r\n\r\n  await dispatch(searchUser(query!, false));\r\n};\r\n\r\nconst updateUserReposPage = (page: number, userId: number): AppThunk => async (\r\n  dispatch\r\n) => {\r\n  dispatch(actions.updateUserReposPage({ page, userId }));\r\n  await dispatch(fetchUserRepos(userId));\r\n};\r\n\r\nconst exportFunctions = {\r\n  fetchUserRepos,\r\n  searchUser,\r\n  updateUsersPage,\r\n  updateUserReposPage,\r\n};\r\n\r\nexport default exportFunctions;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Button, Spinner } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface IProps {\r\n  fetching: boolean;\r\n  search: (query: string) => void;\r\n}\r\n\r\nconst SearchForm: React.FC<IProps> = ({ fetching, search }) => {\r\n  const [query, setQuery] = useState<string>(\"\");\r\n\r\n  const handleChange = ({ target }: React.ChangeEvent<HTMLInputElement>) =>\r\n    setQuery(target.value);\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    search(query);\r\n    event.preventDefault();\r\n  };\r\n\r\n  const spinner = fetching && (\r\n    <Spinner animation=\"border\" size=\"sm\" as=\"span\" className=\"mr-2\" />\r\n  );\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Form.Group controlId=\"formQuery\">\r\n        <Form.Control\r\n          placeholder=\"Enter username\"\r\n          value={query}\r\n          onChange={handleChange}\r\n        />\r\n      </Form.Group>\r\n      <Button type=\"submit\" disabled={fetching} block={true}>\r\n        {spinner}\r\n        Search\r\n        <FontAwesomeIcon icon={faSearch} className=\"ml-1\"/>\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","import React from \"react\";\r\n\r\ninterface IProps {\r\n  searchQuery: string;\r\n}\r\n\r\nconst SearchQueryInfo: React.FC<IProps> = ({ searchQuery }) => {\r\n  return <p>Showing users for \"{searchQuery}\"</p>;\r\n};\r\n\r\nexport default SearchQueryInfo;\r\n","import React from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { IRepo } from \"../../services/store/types\";\r\n\r\nimport classes from \"./Repo.module.css\";\r\n\r\ninterface IProps {\r\n  repo: IRepo;\r\n}\r\n\r\nconst Repo: React.FC<IProps> = ({\r\n  repo: { name, description, stargazersCount },\r\n}) => {\r\n  return (\r\n    <section className={classes.wrapper}>\r\n      <Row className={classes[\"main-row\"]}>\r\n        <Col sm=\"10\">{name}</Col>\r\n        <Col sm=\"2\" className={classes[\"stargazers-col\"]}>\r\n          {stargazersCount}\r\n          <FontAwesomeIcon icon={faStar} className=\"ml-1\"/>\r\n        </Col>\r\n      </Row>\r\n      <Row className={classes[\"description-row\"]}>\r\n        <Col>{description}</Col>\r\n      </Row>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Repo;\r\n","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nimport classes from \"./LoadingMask.module.css\";\r\n\r\nconst LoadingMask: React.FC = () => {\r\n  return (\r\n    <div className={classes.wrapper} data-testid=\"loading-mask\">\r\n      <Spinner animation=\"border\" variant=\"primary\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingMask;\r\n","import React from \"react\";\r\nimport { Pagination as BsPagination } from \"react-bootstrap\";\r\n\r\nimport { IPagination } from \"../../utils/types\";\r\n\r\nimport classes from \"./Pagination.module.css\";\r\n\r\ninterface IProps {\r\n  pagination: IPagination;\r\n  onPageChange: (page: number) => void;\r\n  fetching: boolean;\r\n  size?: \"sm\" | \"lg\";\r\n}\r\n\r\nconst Pagination: React.FC<IProps> = ({\r\n  pagination: { page, pageCount },\r\n  onPageChange,\r\n  fetching,\r\n  size,\r\n}) => {\r\n  if (pageCount === 1) {\r\n    return null;\r\n  }\r\n\r\n  const prevDisabled = fetching || page === 1;\r\n  const nextDisabled = fetching || page === pageCount;\r\n\r\n  const handleFirstClick = () => onPageChange(1);\r\n  const handlePrevClick = () => onPageChange(page - 1);\r\n  const handleNextClick = () => onPageChange(page + 1);\r\n  const handleLastClick = () => onPageChange(pageCount);\r\n\r\n  return (\r\n    <BsPagination size={size} className={classes.pagination}>\r\n      <BsPagination.First\r\n        disabled={prevDisabled}\r\n        onClick={handleFirstClick}\r\n        data-testid=\"first-button\"\r\n      />\r\n      <BsPagination.Prev\r\n        disabled={prevDisabled}\r\n        onClick={handlePrevClick}\r\n        data-testid=\"prev-button\"\r\n      />\r\n      <BsPagination.Item active>\r\n        {page}/{pageCount}\r\n      </BsPagination.Item>\r\n      <BsPagination.Next\r\n        disabled={nextDisabled}\r\n        onClick={handleNextClick}\r\n        data-testid=\"next-button\"\r\n      />\r\n      <BsPagination.Last\r\n        disabled={nextDisabled}\r\n        onClick={handleLastClick}\r\n        data-testid=\"last-button\"\r\n      />\r\n    </BsPagination>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\nimport { IUserResult } from \"../../services/store/types\";\r\n\r\nimport Repo from \"../Repo\";\r\nimport LoadingMask from \"../../../../shared/LoadingMask\";\r\nimport Pagination from \"../../../../shared/Pagination\";\r\n\r\nimport classes from \"./ReposDetails.module.css\";\r\n\r\ninterface IProps {\r\n  user: IUserResult;\r\n  updateUserReposPage: (page: number, userId: number) => void;\r\n}\r\n\r\nconst ReposDetails: React.FC<IProps> = ({ user, updateUserReposPage }) => {\r\n  const handleReposPageChange = (page: number) =>\r\n    updateUserReposPage(page, user.id);\r\n\r\n  const repos =\r\n    !user.error && user.repos.map((repo) => <Repo key={repo.id} repo={repo} />);\r\n\r\n  const loadingMask = user.fetching && <LoadingMask />;\r\n\r\n  const errorAlert = user.error && (\r\n    <Alert variant=\"danger\">Error while fetching user repositories!</Alert>\r\n  );\r\n\r\n  const showNoResultsAlert = !user.error && user.repos.length === 0;\r\n  const noResultAlert = showNoResultsAlert && (\r\n    <Alert variant=\"info\">No repositories found for the user.</Alert>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      {loadingMask}\r\n      {errorAlert}\r\n      {noResultAlert}\r\n      {repos}\r\n      <Pagination\r\n        pagination={user.pagination}\r\n        onPageChange={handleReposPageChange}\r\n        fetching={user.fetching}\r\n        size=\"sm\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReposDetails;\r\n","import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faChevronDown, faChevronUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { IUserResult } from \"../../services/store/types\";\r\n\r\nimport ReposDetails from \"../ReposDetails\";\r\n\r\nimport classes from \"./UserRepos.module.css\";\r\n\r\ninterface IProps {\r\n  user: IUserResult;\r\n  updateUserReposPage: (page: number, userId: number) => void;\r\n}\r\n\r\nconst UserRepos: React.FC<IProps> = ({ user, updateUserReposPage }) => {\r\n  const [expanded, setExpanded] = useState<boolean>(false);\r\n\r\n  const handleExpandToggle = () => setExpanded((value) => !value);\r\n\r\n  const reposDetails = expanded && (\r\n    <ReposDetails user={user} updateUserReposPage={updateUserReposPage} />\r\n  );\r\n\r\n  const icon = expanded ? (\r\n    <FontAwesomeIcon icon={faChevronUp} />\r\n  ) : (\r\n    <FontAwesomeIcon icon={faChevronDown} />\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.user} onClick={handleExpandToggle}>\r\n        <span>{user.login}</span>\r\n        <span>{icon}</span>\r\n      </div>\r\n      {reposDetails}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserRepos;\r\n","import React from \"react\";\r\n\r\nimport { IUserResult } from \"../../services/store/types\";\r\nimport { IPagination } from \"../../../../utils/types\";\r\n\r\nimport UserRepos from \"../UserRepos\";\r\nimport Pagination from \"../../../../shared/Pagination\";\r\n\r\ninterface IProps {\r\n  users: IUserResult[];\r\n  pagination: IPagination;\r\n  fetching: boolean;\r\n  updateUsersPage: (page: number) => void;\r\n  updateUserReposPage: (page: number, userId: number) => void;\r\n}\r\n\r\nconst Users: React.FC<IProps> = ({\r\n  users,\r\n  pagination,\r\n  fetching,\r\n  updateUsersPage,\r\n  updateUserReposPage,\r\n}) => {\r\n  const usersRepos = users.map((user) => (\r\n    <UserRepos\r\n      key={user.id}\r\n      user={user}\r\n      updateUserReposPage={updateUserReposPage}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      {usersRepos}\r\n      <Pagination\r\n        pagination={pagination}\r\n        fetching={fetching}\r\n        onPageChange={updateUsersPage}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\nimport { IUserResult } from \"../../services/store/types\";\r\nimport { IPagination } from \"../../../../utils/types\";\r\n\r\nimport SearchQueryInfo from \"../SearchQueryInfo\";\r\nimport Users from \"../Users\";\r\nimport LoadingMask from \"../../../../shared/LoadingMask\";\r\n\r\ninterface IProps {\r\n  searchQuery: string | null;\r\n  fetching: boolean;\r\n  error: boolean;\r\n  users: IUserResult[];\r\n  pagination: IPagination;\r\n  updateUsersPage: (page: number) => void;\r\n  updateUserReposPage: (page: number, userId: number) => void;\r\n}\r\n\r\nconst Results: React.FC<IProps> = ({\r\n  searchQuery,\r\n  fetching,\r\n  error,\r\n  users,\r\n  pagination,\r\n  updateUsersPage,\r\n  updateUserReposPage,\r\n}) => {\r\n  const showSearchQueryInfo = !error && searchQuery !== null;\r\n  const searchQueryInfo = showSearchQueryInfo && (\r\n    <SearchQueryInfo searchQuery={searchQuery!} />\r\n  );\r\n\r\n  const errorAlert = error && (\r\n    <Alert variant=\"danger\">Error while searching for users!</Alert>\r\n  );\r\n\r\n  const loadingMask = fetching && <LoadingMask />;\r\n\r\n  const showNoResultsAlert =\r\n    !error && users.length === 0 && searchQuery !== null;\r\n  const noResultAlert = showNoResultsAlert && (\r\n    <Alert variant=\"info\">No results found!</Alert>\r\n  );\r\n\r\n  const showSearchAlert = !error && searchQuery === null;\r\n  const searchAlert = showSearchAlert && (\r\n    <Alert variant=\"info\">\r\n      Use browser to search for users and their repositories.\r\n    </Alert>\r\n  );\r\n\r\n  const showUsers = !error && users.length > 0;\r\n  const usersRows = showUsers && (\r\n    <Users\r\n      users={users}\r\n      pagination={pagination}\r\n      fetching={fetching}\r\n      updateUsersPage={updateUsersPage}\r\n      updateUserReposPage={updateUserReposPage}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <section style={{ position: \"relative\" }} className=\"mt-4\">\r\n      {searchQueryInfo}\r\n      {errorAlert}\r\n      {loadingMask}\r\n      {noResultAlert}\r\n      {searchAlert}\r\n      {usersRows}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  selectExplorerState,\r\n  selectUsersResults,\r\n} from \"../../services/store/selectors\";\r\nimport operations from \"../../services/store/operations\";\r\n\r\nimport SearchForm from \"../../components/SearchForm\";\r\nimport Results from \"../../components/Results\";\r\n\r\nconst Explorer: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { fetching, error, searchQuery, pagination } = useSelector(\r\n    selectExplorerState\r\n  );\r\n  const users = useSelector(selectUsersResults);\r\n\r\n  const handleSearch = (query: string) =>\r\n    dispatch(operations.searchUser(query));\r\n\r\n  const handleUpdateUsersPage = (page: number) =>\r\n    dispatch(operations.updateUsersPage(page));\r\n\r\n  const handleUpdateUserReposPage = (page: number, userId: number) =>\r\n    dispatch(operations.updateUserReposPage(page, userId));\r\n\r\n  return (\r\n    <section className=\"m-4\">\r\n      <SearchForm fetching={fetching} search={handleSearch} />\r\n      <Results\r\n        fetching={fetching}\r\n        error={error}\r\n        searchQuery={searchQuery}\r\n        users={users}\r\n        pagination={pagination}\r\n        updateUsersPage={handleUpdateUsersPage}\r\n        updateUserReposPage={handleUpdateUserReposPage}\r\n      />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Explorer;\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nimport Explorer from \"./features/explorer/containers/Explorer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <Explorer />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport store from \"./store\";\r\n\r\nimport App from \"./App\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst app = (\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}